
Object-oriented programming -

Classes represent and define concepts while objects are instances of classes
Attribues - characteristics asscoiated to a type
Methods - functions associated to a type

dir(class)
help(class) view documentation for the class

Dot notation lets you access any of the abilities that the object
might have, called methods or information that it might store called attributes, 
like flavor.

Variables that have different values for different instances of the same class are called instance variables, just like the name variable in this example.

In addition to the __init__ constructor special method, there is also the __str__ special method. This method allows us to define how an instance of an object
will be printed when it’s passed to the print() function. If an object doesn’t have this special method defined, it will wind up using the default representation, 
which will print the position of the object in memory. Not super useful. Here is our Apple class, with the __str__ method added:

>>> class Apple:
...     def __init__(self, color, flavor):
...         self.color = color
...         self.flavor = flavor
...     def __str__(self):
...         return "This apple is {} and its flavor is {}".format(self.color, self.flavor)

Docstring: documenting what functions including inside classes
""" text here """

Defining classes and methods 

class ClassName:
    def method_name(self, other_parameters):
        body_of_method

class ClassName:
    """Documentation for the class."""
    def method_name(self, other_parameters):
        """Documentation for the method."""
        body_of_method
        
def function_name(parameters):
    """Documentation for the function."""
    body_of_function
Object Composition 

OOP Lab 
https://www.coursera.org/learn/python-crash-course/ungradedLab/hmQI2/practice-notebook-object-oriented-programming-optional/lab?path=%2Fnotebooks%2FC1M5_Object_Oriented_Programming_V7.ipynb