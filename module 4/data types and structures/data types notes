Empty String = ""

concatenating 
+
join
str numbers into string
int string into numbers

Multiply strings
"example*3"
'exampleexampleexample'

legnth = len()

String Indexing - starts counting from 0

name = "Jaylen"
print(name[1])
a

last index will be legnth -1 
Negative indexes

text = "Hello i am random words"
print(text[-1])
s

Substring - starts counting from 0
color = "Orange"
color:[1:4]
ran

mess = "A kong message with a silly typo"
new_mess = mess[0:2] + "l" + mess[3:]

pets = "Cats & Dogs" 
pets.index("&")
5

index method returns just the first position that matches
"Cats" in pets 
True
"Dragon" in pets
False


String Methods: 

.uppper upper case
.lower lower case 
.index returns just the first position that matches
.rindex() method finds the last occurrence of the specified value.
.strip - get rid of any spaces tabs or new line characters 
.lstrip as above but on the left
.rstrip as above but on the right
.count  how many times a given substring appears within a string.
.endswith returns whether the string ends with a certain substring
.isnumeric is made up of just numbers
.join

	" ".join(["This", "is", "joined", "by", "spaces"])
	'This is joined by spaces'
.split splits all words in a string by whitespaced. can also use comma or dot

format method {}
.format()
formating expression
price = 7.5
with_tax = price * 1.09
print("Base price: ${:.2f}. With Tax ${:.2f}".format(price, with_tax))
Base price: 7.50. With Tax: $8.18

for x in range(0,101,10):
    print("{:>3} F | {:>6.2f} C".format(x, to_celsius(x)))
{:>3} > used greater than to align text to the right 3 spaces

.replace 
txt = "I like bananas"

x = txt.replace("bananas", "apples")

print(x)


for loop iterates over a sequence of elements








List:


() = tuple
[] = list
{} = dictionary

list = ["This", "is", "a", "list"]

fruits = ["apple", "banana", "cherry"]

if "banana" in fruits:
  print("yes")

list methods:

.append() adding an element to a list
.insert(index,element)
.remove remove the first occurance of the element we pass to it
.pop(index) removes an element from the index

enumerate for loop through a list to get the elements of the list as well as the index of those elements

The enumerate() function takes a list as a parameter and returns a tuple for each element in the list. 
The first value of the tuple is the index and the second value is the element itself.

List comprehension a built in way to create new lists based on sequences or ranges

List-specific operations and methods

list[i] = x Replaces the element at index i with x
list.append(x) Inserts x at the end of the list
list.insert(i, x) Inserts x at index i
list.pop(i) Returns the element a index i, also removing it from the list. 
If i is omitted, the last element is returned and removed.

list.remove(x) Removes the first occurrence of x in the list
list.sort() Sorts the items in the list
list.reverse() Reverses the order of items of the list
list.clear() Removes all the items of the list
list.copy() Creates a copy of the list

list.extend(other_list) Appends all the elements of other_list at the end of list

Dictionary methods

.items 

you can use any immutable data type as dictionary keys: numbers booleans strings 
and tuples