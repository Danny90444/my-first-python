 Inserting a shebang line (such as #!/usr/bin/env python3) as the first line tells the operating system what command we want to use to execute the script.

 In this course, we'll focus on running scripts from a command prompt, and because our Qwiklabs instructional environments will use Ubuntu, will concentrate on using a command prompt in a Linux-based setting.
 That said, with a little tweaking, the techniques we use here can be applied to other platforms like Windows or Mac OS.
 As we called out in our installation videos, the commands to run a Python 3 interpreter might be Python or Python 3 depending on your platform. In our examples, we will a...

 cat 'python file' --- linux command showing contents of python script

 You got it! We use the import command to import any module located in the PATH directory. We can also use import as to assign a localName variable to the imported module.

Notice that init.py file. This is a special file. It's red when the module gets imported and it's used by the interpreter to check if a directory with Python files should it be a module.
So if you have a module split into separate files, and you want the interpreter to recognize the directory has a module, you'll need to create the init.py file.
If you don't have anything to put in this file, you need to create it. You can leave it empty but it needs to exist for the interpreter to recognize directory as a Python module.


file object methods:

open('')
file.readline()
file.read()
file.close()
with open("", w) as file: 

file = open("spider.txt", "w")

Write to an existing file
"a" - Append - will append to the end of the file
"w" - Write - will overwrite any existing content

To create a new file in Python, use the open() method, with one of the following parameters:

"x" - Create - will create a file, returns an error if the file exist
"a" - Append - will create a file if the specified file does not exist
"w" - Write - will create a file if the specified file does not exist

f = open("myfile.txt", "x")


the parameter passed to the open function is the name of the file we want to open. this assumes that the file is in the same directory as the script we're running
When we open a file, like we're doing in this example, the operating system checks that we have permissions to access that file and then gives our code a file descriptor. 
This is a token generated by the OS that allows programs to do more operations with the file. In Python, this file descriptor is stored as an attribute of the files object. 
The file object gives us a bunch of methods that we can use to operate with the file

print(file.readline())

Each time we call the readline method the file object updates its current position in the file so it keeps moving forwards
with the read method it reads from the current position until the end of the file instead of just one line

with open("spider.txt") as file:
print(file.readline())

When we use a "with" block Python will automatically close the file.

with open("spider.txt") as file: 
	for line in file:
		print(line.upper())

print the contents of the file without new lines of spaces
with open("spider.txt") as file: 
	for line in file:
		print(line.strip().upper())

file = open("spider.txt")
lines = file.readlines()
file.close()
lines.sort()
print(lines)
file.write 

This prints the lines alphabetically and uses \n to display a newline character when printing a liswt of strings. \t is also common for tab


with open("novel.txt", "w") as file:
	file.write("It was a dark and stormy night")

file modes:

	r:  read only
	w:  write only
	a:  append
	r+: read-write
if you open a file in write mode it immediately erases all contents of that file

OS module functions:
os.remove("")
os.rename("","")
os.path.exists("")
os.path.getsize("") - file size in bytes 
os.path.getmtime("") - check when file was last modified in unix timestamp
	timestamp = os.path.gettime("")
	datetime.datetime.fromtimestamp(timestamp)
	 - the fromtimestamp method of the datetime class in the datetime module
os.path.abspath("") - takes a filename and turns it into an absolute path

import os
os.remove("novel.txt")
os.rename("first_draft.txt", "finished_masterpiece")

print(os.getcwd()) - prints current working directory
os.mkdir("") make dir
os.chdir change dir
os.rmdir("") will only work if the directory is empty 
os.listdir("") 
 -Please do not pass any argument in the function 'os.listdir()'. 
  This is an optional argument in the 'listdir()' function, and if we don't provide a specified path inside the function, 
  then it will print all the file names from the current working directory.

os.path.join(dir, name)
os.path.isdir()
os.pardir The command "os.pardir" is a constant string used by the operating system to refer to the parent directory.
Apparently os.pardir is literally the same as '..'.

In Linux and MacOS the the portions of a file are split using a forward slash (/)
On windows they're split using a backslash